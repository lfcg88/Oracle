CREATE OR REPLACE PROCEDURE SGPB_PROC.SGPB6019 IS
---------------------------------------------------------------------------------------------------------------------------
--      BRADESCO SEGUROS S.A.
--      PROGRAMA         : sgpb6017.SQL
--      AUTOR            : HUGO CARDOSO - VALUE TEAM IT CONSULTING
--      DATA             : 13/02/2008
--      OBJETIVO         : CARGA DAS METAS DAS AGENCIAS
--      FREQUENCIA       : TRIMESTRAL
----------------------------------------------------------------------------------------------------------------------------
-- VARIAVEIS DE TRABALHO
VAR_ERRO 		   		    VARCHAR2(1) 						:= 'N';
VAR_TABELA_HIERQ	   	    VARCHAR2(30) 						:= 'HIERQ_PBLIC_ALVO';
VAR_TABELA_META	   	        VARCHAR2(30) 						:= 'META_DSTAQ';
VAR_LOG                     LOG_CARGA.RLOG%TYPE;
VAR_LOG_PROCESSO            LOG_CARGA.CTPO_REG_LOG%TYPE        	:= 'P';
VAR_LOG_DADO                LOG_CARGA.CTPO_REG_LOG%TYPE        	:= 'D';
VAR_CSIT_CTRLM              SIT_ROTNA_CTRLM.CSIT_CTRLM%TYPE     :=  1;
VAR_TOT_REG_LIDO_BODY       NUMBER;
VAR_TOT_REG_PROC            NUMBER;
VAR_FIM_PROCESSO_ERRO       EXCEPTION;
VAR_GRP_RAMO			    VARCHAR2(1);
VAR_DCOMPTENCIA			    META_DSTAQ.DAPURC_DSTAQ%TYPE;
VAR_VMETA                   NUMBER;
VAR_VERIFICA_HIERQ		    NUMBER;
VAR_CHIERQ_PBLIC_ALVO_DSTAQ NUMBER;
VAR_CCANAL_PROD				NUMBER;	
--
-- VARIAVEIS PARA ALTERACAO DA SITUACAO DA ROTINA
VAR_STATUS_PROCESSANDO	   VARCHAR2(02)			            	:= 'PC';
VAR_STATUS_PROCESSADO_OK   VARCHAR2(02)				            := 'PO';
VAR_STATUS_ERRO	   	   	   VARCHAR2(02)			             	:= 'PE';
VAR_STATUS_ROTNA	   	     VARCHAR2(02);
--
-- VARIAVEIS PARA ABERTURA E MANIPULACAO DO ARQUIVO
VAR_ARQUIVO                UTL_FILE.FILE_TYPE;
VAR_REGISTRO_ARQUIVO       VARCHAR2(500);
VAR_CAMBTE                 ARQ_TRAB.CAMBTE%TYPE;              	-- VAI SER ALIMENTADO PELO PARAMETRO DE AMBIENTE
VAR_CSIST                  ARQ_TRAB.CSIST%TYPE                	:= 'SGPB';
VAR_CROTNA                 ARQ_TRAB.CROTNA%TYPE               	:= 'SGPB6017';
VAR_CTPO_ACSSO             ARQ_TRAB.CTPO_ACSSO%TYPE           	:= 'R';
VAR_IARQ_TRAB              ARQ_TRAB.IARQ_TRAB%TYPE;
VAR_IDTRIO_TRAB            DTRIO_TRAB.IDTRIO_TRAB%TYPE;
--
-- A VARIAVEL DE TRATAMENTO DE ERRO DO CONTROL-M SERA INICIALIZADA COM O FLAG DE TERMINO NORMAL COM SUCESSO (=1)
VAR_CSEQ_ARQ_TRAB          ARQ_TRAB.CSEQ_ARQ_TRAB%TYPE        	:= 1;
--
-- VARIAVEIS DO PARAMETRO DE CARGA
VAR_CPARM                  PARM_CARGA.CPARM%TYPE              	:= 213; -- PARAMETRO DE CARGA PARA OS DADOS DE REDE
VAR_DCARGA                 PARM_CARGA.DCARGA%TYPE;
VAR_DPROX_CARGA            PARM_CARGA.DPROX_CARGA%TYPE;
VAR_DINIC_ROTNA            DATE                                 := SYSDATE;

-- VARIAVEL REFERENTE A TABELA ALVO
WROW                       HIERQ_PBLIC_ALVO%ROWTYPE;
/* ***************************************************************** */
PROCEDURE TRATA_PARAMETRO IS
--
BEGIN
   --
    VAR_CAMBTE := FC_VERIFICA_AMBIENTE_ROTINA;

   IF VAR_CAMBTE NOT IN ('DESV','PROD') THEN
 	   VAR_LOG := 'PARAMETRO INVALIDO. AMBIENTE INFORMADO NO PARAMETRO: ' || VAR_CAMBTE;
     	PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
		VAR_LOG := null;
      RAISE VAR_FIM_PROCESSO_ERRO;
   END IF;
   --
   VAR_LOG := 'PARAMETRO DE AMBIENTE INFORMADO: ' || VAR_CAMBTE;
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   VAR_LOG := null;
   --
   COMMIT;
   --
-- RECUPERA OS DADOS DE PARAMETRO DE CARGA
   PR_LE_PARAMETRO_CARGA(VAR_CPARM, VAR_DCARGA, VAR_DPROX_CARGA);
   VAR_LOG := 'DATA DA ULTIMA CARGA: ' || TO_CHAR(VAR_DCARGA, 'DD/MM/YYYY');
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   --
   VAR_LOG := 'DATA DA PROXIMA CARGA: ' || TO_CHAR(VAR_DPROX_CARGA, 'DD/MM/YYYY');
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   --      
EXCEPTION
   WHEN OTHERS THEN
        VAR_LOG  := 'ERRO NO TRATA PARAMETRO. ERRO ORACLE: ' || SUBSTR( SQLERRM, 1, 120);
        PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
		VAR_LOG := null;
        --
        RAISE VAR_FIM_PROCESSO_ERRO;
END TRATA_PARAMETRO;
--
------------------------------------------------------------------------------------------------------
--
PROCEDURE INFO_ARQUIVO IS
BEGIN
      PR_DIRETORIO_ARQUIVO( VAR_CAMBTE,
                            VAR_CSIST,
                            VAR_CROTNA,
                            VAR_CTPO_ACSSO,
                            VAR_CSEQ_ARQ_TRAB,
                            VAR_IDTRIO_TRAB,
                            VAR_IARQ_TRAB );
--
      VAR_LOG := 'DIRETORIO: '  || VAR_IDTRIO_TRAB || '  ---  ' ||
                 'ARQUIVO: '    || VAR_IARQ_TRAB;
      PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
--
      VAR_LOG := 'ABRINDO ARQUIVO DE CARGA PARA CARGA.';
      PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
--
      VAR_ARQUIVO := UTL_FILE.FOPEN(VAR_IDTRIO_TRAB, VAR_IARQ_TRAB, VAR_CTPO_ACSSO);
--
      IF NOT UTL_FILE.IS_OPEN(VAR_ARQUIVO) THEN
--
         VAR_CSIT_CTRLM := 6;
--
         VAR_LOG := 'ERRO NA ABERTURA DO ARQUIVO. ' ||
                    'ERRO ORACLE: '|| SUBSTR(SQLERRM, 1, 120);
         PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
--
         UTL_FILE.FCLOSE(VAR_ARQUIVO);
         RAISE VAR_FIM_PROCESSO_ERRO;
--
      END IF;
--
   EXCEPTION
      WHEN OTHERS THEN
--
           VAR_CSIT_CTRLM := 6;
--
           VAR_LOG := 'ERRO AO TENTAR ABRIR O ARQUIVO USANDO UTL_FILE.FOPEN. '||
                      'DIRETORIO: '  || VAR_IDTRIO_TRAB || '  ' ||
                      'ARQUIVO: '    || VAR_IARQ_TRAB;
           PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
--
           VAR_LOG := 'ERRO ORACLE: '|| SUBSTR(SQLERRM, 1, 120);
           PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
--
           RAISE VAR_FIM_PROCESSO_ERRO;
--
END INFO_ARQUIVO;
--
-------------------------------------------------------------------------------------------------------
--
PROCEDURE INSERE_META IS
--
VAR_EXISTE_CPF_CNPJ   	NUMBER		   :=0;
--
BEGIN
    --
    SELECT COUNT(*) INTO VAR_EXISTE_CPF_CNPJ FROM META_DSTAQ MD, HIERQ_PBLIC_ALVO HPA
     WHERE MD.CHIERQ_PBLIC_ALVO_DSTAQ = HPA.CHIERQ_PBLIC_ALVO_DSTAQ
       AND MD.CHIERQ_PBLIC_ALVO_DSTAQ = VAR_CHIERQ_PBLIC_ALVO_DSTAQ;
    --
	IF (VAR_GRP_RAMO = 'A' AND VAR_EXISTE_CPF_CNPJ > 0) THEN
		UPDATE META_DSTAQ SET VMETA_AUTO = VAR_VMETA WHERE CHIERQ_PBLIC_ALVO_DSTAQ = VAR_CHIERQ_PBLIC_ALVO_DSTAQ;
	--
	ELSE IF (VAR_GRP_RAMO = 'A' AND VAR_EXISTE_CPF_CNPJ = 0) THEN
      	INSERT INTO META_DSTAQ
     		   (
     		    CCAMPA_DSTAQ,
     		    CHIERQ_PBLIC_ALVO_DSTAQ,
     		    VMETA_AUTO,
     		    CPARM_HIERQ_DSTAQ,
     		    VMETA_RE
     		   )
     	VALUES
     		   (
                3,
                VAR_CHIERQ_PBLIC_ALVO_DSTAQ,
                VAR_VMETA,
                7,
                NULL
               );
        END IF;
    END IF;
    --
    IF (VAR_GRP_RAMO = 'R' AND VAR_EXISTE_CPF_CNPJ > 0) THEN
		UPDATE META_DSTAQ SET VMETA_AUTO = VAR_VMETA WHERE CHIERQ_PBLIC_ALVO_DSTAQ = VAR_CHIERQ_PBLIC_ALVO_DSTAQ;
	--
	ELSE IF (VAR_GRP_RAMO = 'R' AND VAR_EXISTE_CPF_CNPJ = 0) THEN
      	INSERT INTO META_DSTAQ
     		   (
     		    CCAMPA_DSTAQ,
     		    CHIERQ_PBLIC_ALVO_DSTAQ,
     		    VMETA_RE,
     		    CPARM_HIERQ_DSTAQ,
     		    VMETA_AUTO
     		   )
     	VALUES
     		   (
                3,
                VAR_CHIERQ_PBLIC_ALVO_DSTAQ,
                VAR_VMETA,
                7,
                NULL
               );
        END IF;
    END IF;
    --
END INSERE_META;
--
-----------------------------------------------------------------------
--
PROCEDURE CARREGA_DETALHE IS
--
BEGIN
 --
 VAR_ERRO                     := 'N';
 WROW.CCANAL_PROD_DW          := NULL;
 WROW.CCPF_CNPJ_BASE          := NULL;
 WROW.CTPO_PSSOA              := NULL;
  
 
-- SEQUÊNCIA DE EXTRAÇÃO DOS DADOS DO ARQUIVO
--
-- 1) CÓDIGO CCANAL_PROD --

 BEGIN
  VAR_CCANAL_PROD       := TO_NUMBER(SUBSTR(VAR_REGISTRO_ARQUIVO, 3, 1));
  --
  IF VAR_CCANAL_PROD = 2 THEN WROW.CCANAL_PROD_DW := 4;
  END IF;
  --
  IF VAR_CCANAL_PROD = 3 THEN WROW.CCANAL_PROD_DW := 8;
  END IF;  
  --
  EXCEPTION
 	WHEN OTHERS THEN
 		WROW.CCANAL_PROD_DW    	:= NULL;
        VAR_ERRO 	        	:= 'S';
 		VAR_CSIT_CTRLM       	:= 2;

 		--
		VAR_LOG := '01-ERRO DE FORMATO. CCANAL_PROD_DW. ';
		--
 		VAR_LOG := VAR_LOG || ' CCANAL_PROD_DW:  '             || SUBSTR(VAR_REGISTRO_ARQUIVO, 3, 1)
		                   || ' ERRO ORACLE: '         || SUBSTR( SQLERRM, 1, 120);
		--
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_DADO, NULL, NULL);
		VAR_LOG := null;
			--
 END;
 --
 -- 2) CÓDIGO GRUPO RAMO --

 BEGIN
  VAR_GRP_RAMO            := SUBSTR(VAR_REGISTRO_ARQUIVO, 5, 1);
  EXCEPTION
 	WHEN OTHERS THEN
      VAR_GRP_RAMO        := null;
 		      VAR_ERRO      	:= 'S';
 		VAR_CSIT_CTRLM       	:=  2;

 		--
		VAR_LOG := '01-ERRO DE FORMATO. CCANAL_PROD_DW. ';
		--
 		VAR_LOG := VAR_LOG || ' GRP_RAMO:  '             || SUBSTR(VAR_REGISTRO_ARQUIVO,5, 1)
		                   || ' ERRO ORACLE: '         || SUBSTR( SQLERRM, 1, 120);
		--
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_DADO, NULL, NULL);
		VAR_LOG := null;
			--
 END;
 
 -- 3) CÓDIGO CCPF_CNPJ_BASE --

 BEGIN
  WROW.CCPF_CNPJ_BASE       := TO_NUMBER(SUBSTR(VAR_REGISTRO_ARQUIVO, 7, 14));
  EXCEPTION
 	WHEN OTHERS THEN
 		WROW.CCPF_CNPJ_BASE    	:= NULL;
        VAR_ERRO 	        	:= 'S';
 		VAR_CSIT_CTRLM       	  := 2;

 		--
		VAR_LOG := '01-ERRO DE FORMATO. CCPF_CNPJ_BASE. ';
		--
 		VAR_LOG := VAR_LOG || ' CCPF_CNPJ_BASE:  '             || SUBSTR(VAR_REGISTRO_ARQUIVO,7, 14)
		                   || ' ERRO ORACLE: '         || SUBSTR( SQLERRM, 1, 120);
		--
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_DADO, NULL, NULL);
		VAR_LOG := null;
			--
 END;
 
  -- 4) CÓDIGO TPO_PSSOA --

 BEGIN
  WROW.CTPO_PSSOA       := SUBSTR(VAR_REGISTRO_ARQUIVO, 22, 1);
  EXCEPTION
 	WHEN OTHERS THEN
 		WROW.CTPO_PSSOA    	:= NULL;
        VAR_ERRO 	        	:= 'S';
 		VAR_CSIT_CTRLM       	:= 2;

 		--
		VAR_LOG := '01-ERRO DE FORMATO. CTPO_PSSOA. ';
		--
 		VAR_LOG := VAR_LOG || ' CTPO_PSSOA:  '         || SUBSTR(VAR_REGISTRO_ARQUIVO,22, 1)
		                   || ' ERRO ORACLE: '         || SUBSTR( SQLERRM, 1, 120);
		--
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_DADO, NULL, NULL);
		VAR_LOG := null;
			--
 END;
 
   -- 5) DATA COMPETÊNCIA --

 BEGIN
  VAR_DCOMPTENCIA       := TO_DATE(SUBSTR(VAR_REGISTRO_ARQUIVO, 24, 6)||'01','YYYYMMDD');
  EXCEPTION
 	WHEN OTHERS THEN
    VAR_ERRO 	        	:= 'S';
 		VAR_CSIT_CTRLM       	:= 2;

 		--
		VAR_LOG := '01-ERRO DE FORMATO. COMPETÊNCIA. ';
		--
 		VAR_LOG := VAR_LOG || ' COMPETÊNCIA:  '         || SUBSTR(VAR_REGISTRO_ARQUIVO,22, 1)
		                   || ' ERRO ORACLE: '         || SUBSTR( SQLERRM, 1, 120);
		--
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_DADO, NULL, NULL);
		VAR_LOG := null;
			--
 END;
 
 -- 6) OBJETIVO (meta) --

 BEGIN
  VAR_VMETA       := TO_NUMBER(SUBSTR(VAR_REGISTRO_ARQUIVO, 31, 17));
  EXCEPTION
 	WHEN OTHERS THEN
 		VAR_ERRO 	        	:= 'S';
 		VAR_CSIT_CTRLM       	:= 2;

 		--
		VAR_LOG := '01-ERRO DE FORMATO. VALOR META. ';
		--
 		VAR_LOG := VAR_LOG || ' VALOR META:  '         || SUBSTR(VAR_REGISTRO_ARQUIVO, 31, 17)
		                   || ' ERRO ORACLE: '         || SUBSTR( SQLERRM, 1, 120);
		--
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_DADO, NULL, NULL);
		VAR_LOG := null;
			--
 END;

 BEGIN
      SELECT COUNT(*) INTO VAR_VERIFICA_HIERQ FROM HIERQ_PBLIC_ALVO
             WHERE    CCANAL_PROD_DW = WROW.CCANAL_PROD_DW
             AND      CCPF_CNPJ_BASE = WROW.CCPF_CNPJ_BASE
             AND      CTPO_PSSOA = WROW.CTPO_PSSOA
             AND      CCAMPA_DSTAQ = 3
             AND      CPARM_HIERQ_DSTAQ = 7;
      --
      SELECT MAX(CHIERQ_PBLIC_ALVO_DSTAQ) INTO VAR_CHIERQ_PBLIC_ALVO_DSTAQ FROM HIERQ_PBLIC_ALVO
        WHERE  CCAMPA_DSTAQ = 3
        AND    CPARM_HIERQ_DSTAQ = 7
        GROUP BY CCAMPA_DSTAQ,CPARM_HIERQ_DSTAQ;
      --
      VAR_CHIERQ_PBLIC_ALVO_DSTAQ := VAR_CHIERQ_PBLIC_ALVO_DSTAQ + 1;
      --       
      IF (VAR_VERIFICA_HIERQ > 0) THEN
         INSERE_META;
      --   
      ELSE
        --             
        INSERT INTO HIERQ_PBLIC_ALVO
              (
               CCAMPA_DSTAQ,
               CPARM_HIERQ_DSTAQ,
               CHIERQ_PBLIC_ALVO_DSTAQ,
               CCANAL_PROD_DW,
               CTPO_PSSOA,
               CCPF_CNPJ_BASE
              )
         VALUES
              (
               3,
               7,
               VAR_CHIERQ_PBLIC_ALVO_DSTAQ,
               WROW.CCANAL_PROD_DW,
               WROW.CTPO_PSSOA,
               WROW.CCPF_CNPJ_BASE
              );
         --
         INSERE_META;
         --
      END IF;
  END;  
         
 /* 
VERIFICAR SE JA EXISTE HIERARQUIA PARA A LINHA SELECIONADA POR:
	UND_PROD;CNPJ;TPO_PSSOA; CCAMPA_DSTAQ = 3; CPARM_HIERQ_DSTAQ = 7
	
	SE ACHOU 
		INSERE META - PEGAR CHIERQ_PBLIC_ALVO_DSTAQ + DADOS FIXOS + VALORES DO ARQUIVO (COMPETENCIA = DT-APURACAO E 
																			SE GRUPO DE RAMO = A 
																				 OBJEVTIVO = VMETA AUTO
																			SE  GRUPO DE RAMO = R
																				 OBJEVTIVO = VMETA RE)
																						 
	NÃO EXISTE A HIERARQUIA
		CADASTRAR NA TABELA DE HIERARQUI APENAS OS VALORES USADOS NA PESQUISA,
		MAIS CHIERQ_PBLIC_ALVO_DSTAQ (QUE MAX +1 POR AGRUPAMENTO DE CCAMPA_DSTAQ,CPARM_HIERQ_DSTAQ)
		
    INSERE META -  PEGAR CHIERQ_PBLIC_ALVO_DSTAQ + DADOS FIXOS + VALORES DO ARQUIVO (COMPETENCIA = DT-APURACAO E 
																			SE GRUPO DE RAMO = A 
																				 OBJEVTIVO = VMETA AUTO
																			SE  GRUPO DE RAMO = R
																				 OBJEVTIVO = VMETA RE)                                      
*/
END CARREGA_DETALHE;
/* *******************************************************************/
PROCEDURE TRATA_BODY IS
--
--
BEGIN
   --
   VAR_LOG := 'DADOS DO ARQUIVO DE CARGA. INICIANDO TRATAMENTO DO BODY.';
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   --
   VAR_TOT_REG_LIDO_BODY := 0;
   VAR_TOT_REG_PROC      := 0;
   --
   LOOP
      BEGIN
         UTL_FILE.GET_LINE( VAR_ARQUIVO, VAR_REGISTRO_ARQUIVO);
      EXCEPTION
         WHEN NO_DATA_FOUND THEN  -- FIM DE ARQUIVO
              UTL_FILE.FCLOSE( VAR_ARQUIVO);
              EXIT;
      END;
      --
      IF SUBSTR( VAR_REGISTRO_ARQUIVO, 1, 1) = '1' THEN
         VAR_TOT_REG_LIDO_BODY := VAR_TOT_REG_LIDO_BODY + 1;
         CARREGA_DETALHE; -- INSERÇÃO!!
      ELSE
         VAR_LOG := 'TIPO REGISTRO INVÁLIDO. LINHA DO REGISTRO: ' ||
                     SUBSTR( VAR_REGISTRO_ARQUIVO, 1, 190);
	     PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
         RAISE VAR_FIM_PROCESSO_ERRO;
      END IF;
   END LOOP;
   --
   COMMIT;
   --   
EXCEPTION
   WHEN OTHERS THEN
      VAR_LOG := 'ERRO NO TRATA BODY. REGISTRO: ' || SUBSTR( VAR_REGISTRO_ARQUIVO, 1, 200);
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
      --
      VAR_LOG := 'ERRO ORACLE: ' || SUBSTR( SQLERRM, 1, 120);
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   	--
      UTL_FILE.FCLOSE( VAR_ARQUIVO);
      RAISE VAR_FIM_PROCESSO_ERRO;
   	--
END TRATA_BODY;
--
--------------------------------  PROGRAMA PRINCIPAL  -----------------------------
--
BEGIN

   -- VERIFICA STATUS DA ROTINA ANTES DE INICIAR O PROCESSAMENTO, SE ESTIVER COM
   -- STATUS DE PROCESSADO-OK ('PO') OU PROCESSANDO ('PC'), O PROCESSAMENTO NÃO SERÁ FEITO

    VAR_STATUS_ROTNA := FC_RECUPERA_STATUS_ROTINA(VAR_CROTNA,VAR_CPARM);
    
   -- ATUALIZA STATUS DA ROTINA
   PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA,VAR_CPARM,VAR_STATUS_PROCESSANDO);         

   -- LIMPA A TABELA DE LOG NO INICIO DO PROCESSO
   PR_LIMPA_LOG_CARGA ( VAR_CROTNA );

	VAR_LOG := 'VERIFICA STATUS DA ROTINA ANTES DE INICIAR O PROCESSAMENTO.... ' || VAR_STATUS_ROTNA;
--    DBMS_OUTPUT.PUT_LINE('VERIFICA STATUS DA ROTINA ANTES DE INICIAR O PROCESSAMENTO.... ' || VAR_STATUS_ROTNA);
    PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
     COMMIT;     
   
   -- (O TRIGGER JOGARAH AS INFORMACOES PARA A TABELA DE HISTORICO)
   VAR_LOG := 'LIMPA A TABELA DE LOG NO INICIO DO PROCESSO ' || VAR_CROTNA;
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
     COMMIT;

   -- GRAVA LOG INICIAL DE CARGA
   VAR_LOG := 'INICIO DO PROCESSO DE CARGA DA TABELA ' ||VAR_TABELA_HIERQ||' E DA TABELA '||VAR_TABELA_META||' NO NI';
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
     COMMIT;
    --
    -- TRATA O PARAMETRO DO PROCESSO
   VAR_LOG := 'TRATA O PARAMETRO DO PROCESSO - TRATA_PARAMETRO' ;
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   COMMIT;
   TRATA_PARAMETRO; 	-- PROCEDURE INTERNA (SUB-PROGRAMA)
   --
   -- PROCESSA ARQUIVO (CARREGA A TABELA TEMPORARIA)
   VAR_LOG := 'PROCESSA ARQUIVO (CARREGA A TABELA HIERQ_PBLIC_ALVO E META_DSTAQ) - TRATA_BODY' ;
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   COMMIT;
   TRATA_BODY;		-- PROCEDURE INTERNA (SUB-PROGRAMA)
   ----
    IF VAR_CSIT_CTRLM = 1 THEN
      VAR_LOG  := 'TOTAL DE REGISTROS PROCESSADOS NO NI: '      || TO_CHAR(VAR_TOT_REG_PROC);
      PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
      VAR_LOG :=  'TERMINO NORMAL DO PROCESSO(STATUS = 1).  OS PROCESSOS DEPENDENTES PODEM CONTINUAR.';
	  PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
	  COMMIT;
   ELSIF VAR_CSIT_CTRLM = 2 THEN
      VAR_LOG := 'TOTAL DE REGISTROS PROCESSADOS NO NI: '      || TO_CHAR(VAR_TOT_REG_PROC);
      PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
      VAR_LOG := 'TERMINO NORMAL DO PROCESSO(STATUS = 1).  OS PROCESSOS DEPENDENTES PODEM CONTINUAR.';
	  PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
	  COMMIT;
   ELSIF VAR_CSIT_CTRLM = 6 THEN
      -- ATUALIZA STATUS DA ROTINA
      PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA,VAR_CPARM,VAR_STATUS_ERRO);
      RAISE VAR_FIM_PROCESSO_ERRO;
   END IF;
-- ---------------------------------------------------------------------------------------------------------------
-- GRAVA A SITUACAO DESTE PROCESSO NA TABELA DE CONTROLE DO CTRLM
-- EM CASO DE ERRO ESTA GRAVACAO SO SERA FEITA NA EXCEPTION
   PR_GRAVA_LOG_EXCUC_CTRLM ( VAR_DINIC_ROTNA,
                              VAR_CROTNA     ,
                              SYSDATE        , -- DFIM_ROTNA
                              NULL           , -- IPROG
                              NULL           , -- CERRO
                              VAR_LOG        , -- RERRO
                              VAR_CSIT_CTRLM             );

   -- ATUALIZA STATUS DA ROTINA
   PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA,VAR_CPARM,VAR_STATUS_PROCESSADO_OK);
	--
   VAR_LOG := 'FIM PROCESSO. '  || VAR_CROTNA;
   PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
   commit;
   --
EXCEPTION
   WHEN VAR_FIM_PROCESSO_ERRO THEN
        VAR_CSIT_CTRLM := 6;
        --
        VAR_LOG := 'ESTE PROCESSO FOI FINALIZADO COM ERRO(STATUS = 6). ' ||
                   'OS PROCESSOS DEPENDENTES NAO DEVEM CONTINUAR. '      ||
                   'O ANALISTA DEVERA SER CONTACTADO.';
        PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
        PR_GRAVA_LOG_EXCUC_CTRLM ( VAR_DINIC_ROTNA, VAR_CROTNA, SYSDATE, NULL, NULL, VAR_LOG, VAR_CSIT_CTRLM );
        -- ATUALIZA STATUS DA ROTINA
        PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA,VAR_CPARM,VAR_STATUS_ERRO);
   WHEN OTHERS THEN
        VAR_CSIT_CTRLM := 6;
        VAR_LOG := 'ESTE PROCESSO FOI FINALIZADO COM ERRO(STATUS = 6). ' ||
                   'OS PROCESSOS DEPENDENTES NAO DEVEM CONTINUAR. '      ||
                   'O ANALISTA DEVERA SER CONTACTADO.';
        PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
        VAR_LOG := 'EXCEPTION OTHERS - ERRO ORACLE: ' || SUBSTR(SQLERRM, 1, 120);
        PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
        PR_GRAVA_LOG_EXCUC_CTRLM ( VAR_DINIC_ROTNA, VAR_CROTNA, SYSDATE, NULL, NULL, SQLERRM, VAR_CSIT_CTRLM );
        -- ATUALIZA STATUS DA ROTINA
        PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA,VAR_CPARM,VAR_STATUS_ERRO);
--        
END SGPB6019;
/

