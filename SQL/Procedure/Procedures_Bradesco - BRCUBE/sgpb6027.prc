CREATE OR REPLACE PROCEDURE SGPB_PROC.SGPB6027 IS
------------------------------------------------------------------------------------------------------------------------
--  BRADESCO SEGUROS S.A.                                                                                           
--  DATA            : 19/02/2008
--  AUTOR           : MONIQUE MARQUES - VALUE TEAM                              
--  PROGRAMA        :                                                                              
--  OBJETIVO        : CALCULAR A META DOS CORRETOR POR CNPJ BASE, (INCLUINDO O DESMEMBRAMENTO)
--					  DESCARTANDO SUCURSAL E CPD BLOQUEADOS. 
--					  INCLUINDO PRODUÇÃO INICIAL ZERADA PARA TODOS OS CNPJ BASE QUE TIVEREM METAS.
--  ALTERAÇÕES      :                                                                                               
--            DATA  : -                                                                                              
--            AUTOR : -                                                                                              
--            OBS   : -                                                                                              
------------------------------------------------------------------------------------------------------------------------ 
-- VARIAVEIS DO PARAMETRO DE CARGA
VAR_CPARM                   PARM_CARGA.CPARM%TYPE           := 754;
VAR_CROTNA                 	ARQ_TRAB.CROTNA%TYPE        	    := 'SGPB6027'; 
VAR_CPARM_HIERQ_DSTAQ		PARM_HIERQ_DSTAQ.CPARM_HIERQ_DSTAQ%TYPE	:= 0; --XYZ VERIFICAR QUAL O PARAMETRO QUE DEVEREMOS USAR
VAR_DCARGA                  PARM_CARGA.DCARGA%TYPE;
VAR_DPROX_CARGA             PARM_CARGA.DPROX_CARGA%TYPE;
VAR_TABELA      			VARCHAR2(30) 			   	:= 'META_DSTAQ';
        
VAR_DINIC_ROTNA        		DATE  							:= SYSDATE;
--W_TEMPO_PROC               NUMBER; 

-- VARIAVEIS PARA ALTERACAO DA SITUACAO DA ROTINA
VAR_ROTNA_PC       			SIT_ROTNA.CSIT_ROTNA%TYPE  := 'PC';
VAR_ROTNA_PO       			SIT_ROTNA.CSIT_ROTNA%TYPE  := 'PO';
VAR_ROTNA_PE          		SIT_ROTNA.CSIT_ROTNA%TYPE  := 'PE';

VAR_LOG                     LOG_CARGA.RLOG%TYPE;
VAR_LOG_ADVERTENCIA         LOG_CARGA.CTPO_REG_LOG%TYPE         := 'A'; 
VAR_LOG_PROCESSO            LOG_CARGA.CTPO_REG_LOG%TYPE         := 'P'; 
VAR_CSIT_CTRLM              SIT_ROTNA_CTRLM.CSIT_CTRLM%TYPE;
VAR_FIM_PROCESSO_ERRO      	EXCEPTION;

WROW_META_DSTAQ				META_DSTAQ%ROWTYPE;
WROW_HIERQ					HIERQ_PBLIC_ALVO%ROWTYPE;				  

--VARIAVEIS GLOBAIS PARA CALCULO DA META
VAR_DINIC_META				CAMPA_DSTAQ.DINIC_CAMPA_DSTAQ%TYPE;
VAR_DFIM_META				CAMPA_DSTAQ.DINIC_CAMPA_DSTAQ%TYPE;
VAR_DAPURC_DSTAQ			CAMPA_DSTAQ.DAPURC_DSTAQ%TYPE;
VAR_META_MIN_AUTO			META_DSTAQ.VMETA_AUTO%TYPE;
VAR_META_MIN_RE				META_DSTAQ.VMETA_AUTO%TYPE;

VAR_TOT_REG_PROC           	NUMBER						 		:= 0;
---------------------------------------------------------------------------------------------------------------------------	
PROCEDURE BUSCA_GRP_RGNAL_DSTAQ IS
VAR_CGRP_RGNAL	GRP_RGNAL_DSTAQ.CGRP_RGNAL%TYPE;
BEGIN
	SELECT CGRP_RGNAL 
		INTO VAR_CGRP_RGNAL
	FROM GRP_RGNAL_DSTAQ
	WHERE CRGNAL = WROW_HIERQ.CRGNAL
	  AND CCAMPA_DSTAQ = WROW_HIERQ.CCAMPA_DSTAQ;
	  
	WROW_HIERQ.CGRP_RGNAL	:= VAR_CGRP_RGNAL;

EXCEPTION
	--CASO OCORRA QUALQUER ERRO DE RECUPERAÇÃO NÃO PARAR A CARGA,
	--USAR O CODIGO 1 (NÃO INFORMADO)
	WHEN OTHERS THEN
		WROW_HIERQ.CRGNAL		:= 1;
		WROW_HIERQ.CGRP_RGNAL	:= 1;		
END BUSCA_GRP_RGNAL_DSTAQ;
---------------------------------------------------------------------------------------------------------------------------	
PROCEDURE CALCULA_META (PI_CCAMPA CAMPA_DSTAQ.CCAMPA_DSTAQ%TYPE) IS
BEGIN
	FOR CUR_CRRTR_META IN (SELECT CDIR_RGNAL,CCPF_CNPJ_BASE,CTPO_PSSOA, CCANAL_PROD_DW, SUM(VPROD_AUTO) VPROD_AUTO, SUM(VPROD_RE) VPROD_RE
							FROM (
									-- PRODUCAO AUTO QUE NÃO TEM DESMEMBRAMENTO
									SELECT A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW, SUM(A.VPRMIO_LIQ_AUTO) VPROD_AUTO, 0  VPROD_RE
										FROM VACPROD_CRRTR_CALC_BONUS_AT A, CAMPA_DSTAQ B, CRRTR C, CRRTR_UNFCA_CNPJ D
											WHERE B.CCAMPA_DSTAQ = PI_CCAMPA 
										      AND A.CCANAL_PROD_DW IN (3,5)--os canais dw 3 e 5 representam o canal extra-banco para a destaque
										      AND A.CCRRTR            = C.CCRRTR 
										      AND A.CSUCUR            = C.CUND_PROD
										      AND C.CCPF_CNPJ_BASE    = D.CCPF_CNPJ_BASE
										      AND(A.DEMIS_ENDSS  BETWEEN VAR_DINIC_META AND VAR_DFIM_META)
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 2 
										      					  AND A.CSUCUR            = CCONTD_PARM_CARGA ) 
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 3 
										      					  AND A.CCRRTR   = CCONTD_PARM_CARGA ) 
										GROUP BY A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW
									UNION
									-- PRODUCAO AUTO QUE COM DESMEMBRAMENTO
									SELECT A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW, SUM(A.VPRMIO_LIQ_AUTO) VPROD_AUTO, 0  VPROD_RE
										FROM VACPROD_CRRTR_CALC_BONUS_AT A,CAMPA_DSTAQ B,CRRTR C,CRRTR_UNFCA_CNPJ D,MPMTO_AG_CRRTR E
											WHERE B.CCAMPA_DSTAQ = PI_CCAMPA 
										      AND A.CCANAL_PROD_DW IN (3,5)--os canais dw 3 e 5 representam o canal extra-banco para a destaque
										      AND A.CCRRTR = E.CCRRTR_ORIGN 
										      AND A.CSUCUR = E.CUND_PROD
										      AND A.DEMIS_ENDSS >= E.DENTRD_CRRTR_AG
										      AND A.DEMIS_ENDSS < NVL(E.DSAIDA_CRRTR_AG, TO_DATE(99991231, 'YYYYMMDD')) 
										      AND E.CCRRTR_DSMEM = C.CCRRTR 
										      AND E.CUND_PROD = C.CUND_PROD 
										      AND C.CCPF_CNPJ_BASE = D.CCPF_CNPJ_BASE 
										      AND(A.DEMIS_ENDSS  BETWEEN VAR_DINIC_META AND VAR_DFIM_META )
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 2 
										      					  AND A.CSUCUR            = CCONTD_PARM_CARGA ) 
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 3 
										      					  AND A.CCRRTR   = CCONTD_PARM_CARGA ) 										      
										 GROUP BY A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW
									UNION
									-- PRODUCAO RE SEM DESMENBRAMENTO
									SELECT A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW, 0 VPROD_AUTO, sum(A.VPRMIO_EMTDO_CSSRO_CDIDO) VPROD_RE
										FROM VACPROD_CRRTR_CALC_BONUS_RE A,CAMPA_DSTAQ B, CRRTR C,CRRTR_UNFCA_CNPJ D,GRP_RAMO_CAMPA_DSTAQ E
											WHERE B.CCAMPA_DSTAQ = PI_CCAMPA 
										      AND A.CCANAL_PROD_DW IN (3,5)--os canais dw 3 e 5 representam o canal extra-banco para a destaque
										      AND A.CCRRTR = C.CCRRTR 
										      AND A.CSUCUR = C.CUND_PROD 
										      AND C.CCPF_CNPJ_BASE = D.CCPF_CNPJ_BASE 
										      AND E.CCAMPA_DSTAQ = B.CCAMPA_DSTAQ 
										      AND A.CRAMO = E.CRAMO 
										      AND(A.DEMIS_PRMIO  BETWEEN VAR_DINIC_META AND VAR_DFIM_META )
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 2 
										      					  AND A.CSUCUR            = CCONTD_PARM_CARGA ) 
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 3 
										      					  AND A.CCRRTR   = CCONTD_PARM_CARGA ) 										      
										 GROUP BY A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW
									UNION
									-- PRODUCAO RE COM DESMENBRAMENTO
									SELECT A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW, 0 VPROD_AUTO, sum(A.VPRMIO_EMTDO_CSSRO_CDIDO) VPROD_RE
										FROM VACPROD_CRRTR_CALC_BONUS_RE A,CAMPA_DSTAQ B, CRRTR C,CRRTR_UNFCA_CNPJ D,MPMTO_AG_CRRTR E,GRP_RAMO_CAMPA_DSTAQ F
											WHERE B.CCAMPA_DSTAQ = PI_CCAMPA 
										      AND A.CCANAL_PROD_DW IN (3,5)--os canais dw 3 e 5 representam o canal extra-banco para a destaque
										      AND A.CCRRTR = E.CCRRTR_ORIGN 
										      AND A.CSUCUR = E.CUND_PROD   
										      AND A.DEMIS_PRMIO >= E.DENTRD_CRRTR_AG 
										      AND A.DEMIS_PRMIO < NVL(E.DSAIDA_CRRTR_AG, TO_DATE(99991231, 'YYYYMMDD')) 
										      AND E.CCRRTR_DSMEM = C.CCRRTR 
										      AND E.CUND_PROD = C.CUND_PROD 
										      AND C.CCPF_CNPJ_BASE = D.CCPF_CNPJ_BASE 
										      AND F.CCAMPA_DSTAQ = B.CCAMPA_DSTAQ 
										      AND A.CRAMO = F.CRAMO 
										      AND(A.DEMIS_PRMIO  BETWEEN VAR_DINIC_META AND VAR_DFIM_META )
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 2 
										      					  AND A.CSUCUR            = CCONTD_PARM_CARGA ) 
										      AND NOT EXISTS (SELECT CCONTD_PARM_CARGA
										      					FROM CAMPA_PARM_CARGA_DSTAQ X
										      					WHERE X.CCAMPA_DSTAQ      = B.CCAMPA_DSTAQ 
										      					  AND X.CPARM_CARGA_DSTAQ = 3 
										      					  AND A.CCRRTR   = CCONTD_PARM_CARGA ) 										      
										 GROUP BY A.CDIR_RGNAL,D.CCPF_CNPJ_BASE,C.CTPO_PSSOA, A.CCANAL_PROD_DW
									
										      
							)--FIM FROM			      
				 			GROUP BY CDIR_RGNAL,CCPF_CNPJ_BASE,CTPO_PSSOA) LOOP
	--BEGIN --FOR
	
		WROW_META_DSTAQ	:= NULL;
		WROW_HIERQ		:= NULL;
		VAR_LOG			:= NULL;
		
--------DADOS HIERARQUIA
		WROW_HIERQ.CCAMPA_DSTAQ			:= PI_CCAMPA;
		WROW_HIERQ.CCANAL_PROD_DW		:= CUR_CRRTR_META.CCANAL_PROD_DW;
		WROW_HIERQ.CPARM_HIERQ_DSTAQ	:= VAR_CPARM_HIERQ_DSTAQ;
		WROW_HIERQ.CRGNAL				:= CUR_CRRTR_META.CDIR_RGNAL;
		WROW_HIERQ.CCPF_CNPJ_BASE		:= CUR_CRRTR_META.CCPF_CNPJ_BASE;
		WROW_HIERQ.CTPO_PSSOA			:= CUR_CRRTR_META.CTPO_PSSOA;
	
		--SUB-PROGRAMA QUE RECUPERA O GRUPO DE REGIONAL;
		BUSCA_GRP_RGNAL_DSTAQ;
		
		--PROGRAMA EXTERMO QUE PREENCHE A HIERARQUIA;
		PR_CARREGA_HIERQ_PBLIC_ALVO ( 	VAR_CROTNA,							--VAR_CROTNA IN CHAR,
										WROW_HIERQ.CCANAL_PROD_DW,			--PAR_CCANAL_PROD_DW IN NUMBER,
										WROW_HIERQ.CCAMPA_DSTAQ,			--PAR_CCAMPA_DSTAQ IN NUMBER,
										WROW_HIERQ.CPARM_HIERQ_DSTAQ,		--VAR_CPARM_HIERQ_DSTAQ IN NUMBER,
										WROW_HIERQ.CTPO_PSSOA,				--PAR_CTPO_PSSOA IN CHAR,
										WROW_HIERQ.CCPF_CNPJ_BASE,			--PAR_CCPF_CNPJ_BASE IN NUMBER,
										WROW_HIERQ.CRGNAL,					--PAR_CRGNAL IN NUMBER,
										NULL,								--PAR_CBCO	IN NUMBER,
										NULL,								--PAR_CAG_BCRIA IN NUMBER,
										WROW_HIERQ.CHIERQ_PBLIC_ALVO_DSTAQ,	--PAR_CHIERQ_PBLIC_ALVO_DSTAQ OUT NUMBER,
										VAR_LOG);							--PAR_ERRO_CARGA OUT CHAR)
										
		--PARAR A CARGA POIS NÃO FOI POSSIVEL CARREGAR A HIERARQUIA								
		IF (WROW_HIERQ.CHIERQ_PBLIC_ALVO_DSTAQ IS NULL) AND (VAR_LOG IS NOT NULL) THEN
			PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA,VAR_LOG,VAR_LOG_PROCESSO,NULL,NULL);
			VAR_CSIT_CTRLM := 5;
			RAISE VAR_FIM_PROCESSO_ERRO;	
		END IF;
		
--------DADOS META
		WROW_META_DSTAQ.CCAMPA_DSTAQ			:= PI_CCAMPA;
		WROW_META_DSTAQ.CPARM_HIERQ_DSTAQ		:= VAR_CPARM_HIERQ_DSTAQ;
		WROW_META_DSTAQ.CHIERQ_PBLIC_ALVO_DSTAQ	:= WROW_HIERQ.CHIERQ_PBLIC_ALVO_DSTAQ;
		WROW_META_DSTAQ.DAPURC_DSTAQ			:= VAR_DAPURC_DSTAQ;
		WROW_META_DSTAQ.CCANAL_PROD_DW			:= CUR_CRRTR_META.CCANAL_PROD_DW;
		
		--APLICA AS REGRAS PARA CRIAÇÃO DAS METAS		
		IF	CUR_CRRTR_META.VPROD_AUTO <= 300000 THEN
			WROW_META_DSTAQ.VMETA_AUTO	:=	CUR_CRRTR_META.VPROD_AUTO * 1.2;
		ELSIF (CUR_CRRTR_META.VPROD_AUTO > 300000) AND (CUR_CRRTR_META.VPROD_AUTO <= 600000) THEN
			WROW_META_DSTAQ.VMETA_AUTO	:=	CUR_CRRTR_META.VPROD_AUTO * 1.1;
		ELSIF CUR_CRRTR_META.VPROD_AUTO > 600000 THEN
			WROW_META_DSTAQ.VMETA_AUTO	:=	CUR_CRRTR_META.VPROD_AUTO * 1.05;
		END IF;
		
		IF	CUR_CRRTR_META.VPROD_RE <= 300000 THEN
			WROW_META_DSTAQ.VMETA_RE	:=	CUR_CRRTR_META.VPROD_RE * 1.2;
		ELSIF (CUR_CRRTR_META.VPROD_RE > 300000) AND (CUR_CRRTR_META.VPROD_RE <= 600000) THEN
			WROW_META_DSTAQ.VMETA_RE	:=	CUR_CRRTR_META.VPROD_RE * 1.1;
		ELSIF CUR_CRRTR_META.VPROD_RE > 600000 THEN
			WROW_META_DSTAQ.VMETA_RE	:=	CUR_CRRTR_META.VPROD_RE * 1.05;
		END IF;
		
		--CASO AS METAS CALCULADAS SEJA INFERIORES A META MÍNIMA, DESCARTAR O CALCULO
		IF WROW_META_DSTAQ.VMETA_AUTO < VAR_META_MIN_AUTO THEN
			WROW_META_DSTAQ.VMETA_AUTO := VAR_META_MIN_AUTO;
		END IF;
		
		IF WROW_META_DSTAQ.VMETA_RE < VAR_META_MIN_RE THEN
			WROW_META_DSTAQ.VMETA_RE := VAR_META_MIN_RE;
		END IF;
		
		BEGIN
			INSERT INTO META_DSTAQ (
				CCAMPA_DSTAQ, CHIERQ_PBLIC_ALVO_DSTAQ, DAPURC_DSTAQ
			  , VMETA_AUTO, CPARM_HIERQ_DSTAQ, VMETA_RE
			  , DINCL_REG, DALT_REG, CCANAL_PROD_DW) 
			VALUES (
				WROW_META_DSTAQ.CCAMPA_DSTAQ, WROW_META_DSTAQ.CHIERQ_PBLIC_ALVO_DSTAQ, WROW_META_DSTAQ.DAPURC_DSTAQ
			  , WROW_META_DSTAQ.VMETA_AUTO, WROW_META_DSTAQ.CPARM_HIERQ_DSTAQ, WROW_META_DSTAQ.VMETA_RE
			  , SYSDATE, NULL, WROW_META_DSTAQ.CCANAL_PROD_DW); 
		EXCEPTION
			WHEN OTHERS THEN
				VAR_CSIT_CTRLM		:= 5;
				VAR_LOG := 'PROBLEMA AO INCLUIR A META. '
						 ||'CCAMPA_DSTAQ = '||WROW_META_DSTAQ.CCAMPA_DSTAQ
						 ||'CHIERQ_PBLIC_ALVO_DSTAQ = '||WROW_META_DSTAQ.CHIERQ_PBLIC_ALVO_DSTAQ
						 ||'DAPURC_DSTAQ = '|| WROW_META_DSTAQ.DAPURC_DSTAQ
						 ||'VMETA_AUTO = '||WROW_META_DSTAQ.VMETA_AUTO
						 ||'CPARM_HIERQ_DSTAQ = '||WROW_META_DSTAQ.CPARM_HIERQ_DSTAQ
						 ||'VMETA_RE = '||WROW_META_DSTAQ.VMETA_RE
						 ||'CCANAL_PROD_DW = '||WROW_META_DSTAQ.CCANAL_PROD_DW
						 ||' -- ERRO ORACLE: '||SUBSTR(SQLERRM, 1, 120);
				PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_ADVERTENCIA, NULL, NULL);
				RAISE VAR_FIM_PROCESSO_ERRO;
		END;
		
		BEGIN
			INSERT INTO POSIC_DSTAQ (
				CCAMPA_DSTAQ, CHIERQ_PBLIC_ALVO_DSTAQ, DAPURC_DSTAQ, NRKING_PROD
			  , CPARM_HIERQ_DSTAQ, NRKING_PERC_CRSCT, VPROD_AUTO
			  , VPROD_RE, VPERC_CRSCT_AUTO, VPERC_CRSCT_RE
			  , DINCL_REG, DALT_REG, VPERC_CRSCT
			  , CIND_ALCAN_META, CIND_BLOQ_CAMPA, CCANAL_PROD_DW
			  , NRKING_PROD_RGNAL, NRKING_PERC_CRSCT_RGNAL, CIND_FALTA_META)
			VALUES (
				WROW_META_DSTAQ.CCAMPA_DSTAQ, WROW_META_DSTAQ.CHIERQ_PBLIC_ALVO_DSTAQ, WROW_META_DSTAQ.DAPURC_DSTAQ, NULL
			  , WROW_META_DSTAQ.CPARM_HIERQ_DSTAQ, NULL, 0
			  , 0, 0, 0
			  , SYSDATE, NULL, 0
			  , 'N', NULL, WROW_META_DSTAQ.CCANAL_PROD_DW
			  , NULL, NULL, NULL);
		EXCEPTION
			WHEN OTHERS THEN
				VAR_CSIT_CTRLM		:= 5;
				VAR_LOG := 'PROBLEMA AO INCLUIR A PRODUCAO. '
						 ||'CCAMPA_DSTAQ = '||WROW_META_DSTAQ.CCAMPA_DSTAQ
						 ||'CHIERQ_PBLIC_ALVO_DSTAQ = '||WROW_META_DSTAQ.CHIERQ_PBLIC_ALVO_DSTAQ
						 ||'DAPURC_DSTAQ = '|| WROW_META_DSTAQ.DAPURC_DSTAQ
						 ||'CPARM_HIERQ_DSTAQ = '||WROW_META_DSTAQ.CPARM_HIERQ_DSTAQ
						 ||'CCANAL_PROD_DW = '||WROW_META_DSTAQ.CCANAL_PROD_DW
						 ||' -- ERRO ORACLE: '||SUBSTR(SQLERRM, 1, 120);
				PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_ADVERTENCIA, NULL, NULL);
				RAISE VAR_FIM_PROCESSO_ERRO;
		END;
		
		VAR_TOT_REG_PROC	:= VAR_TOT_REG_PROC + 1;
		
		IF MOD(VAR_TOT_REG_PROC,1000) = 0 THEN
			COMMIT;
		END IF;
	--END;--FOR
	END LOOP;
EXCEPTION
	WHEN VAR_FIM_PROCESSO_ERRO THEN
		RAISE VAR_FIM_PROCESSO_ERRO;	
END CALCULA_META;
------------------------------------  PROGRAMA PRINCIPAL  ------------------------------------
BEGIN
    
	-- COM O FLAG DE TERMINO NORMAL COM SUCESSO (=1)
   	VAR_CSIT_CTRLM := 1;
    -- LIMPA A TABELA DE LOG NO INICIO DO PROCESSO
	PR_LIMPA_LOG_CARGA(VAR_CROTNA);	
	
	-- ATUALIZA O STATUS DA ROTINA
 	PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA, VAR_CPARM, VAR_ROTNA_PC);  
 	 
    -- RECUPERA OS DADOS DE PARAMETRO DE CARGA (O CÓDIGO DE PARâMETRO DE CARGA FOI INICIALIZADO NO DECLARE)
    PR_LE_PARAMETRO_CARGA(VAR_CPARM,VAR_DCARGA,VAR_DPROX_CARGA);	
	-- GRAVA LOG INICIAL DE CARGA
	VAR_LOG := 'INICIO DO PROCESSO CARGA DA TABELA '||VAR_TABELA;
	PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);	
	VAR_LOG := '-> STATUS INICIAL DO CTRL-M: '|| VAR_CSIT_CTRLM;
	PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA,VAR_LOG,VAR_LOG_PROCESSO,NULL,NULL);

	VAR_DAPURC_DSTAQ	:= NULL;
	--SELECIONA TODAS AS CAMPANHAS ATIVAS	
	FOR CUR_CAMPA IN (SELECT CCAMPA_DSTAQ,ICAMPA_DSTAQ,DAPURC_DSTAQ
					  FROM CAMPA_DSTAQ
					  WHERE CIND_CAMPA_ATIVO = 'S'
					  ORDER BY CCAMPA_DSTAQ) LOOP

		VAR_LOG := '----------INICIO DO CALCULO DA META INICIAL/REPROCESSO DA CAMPANHA: '||
				   CUR_CAMPA.CCAMPA_DSTAQ||' - '||CUR_CAMPA.ICAMPA_DSTAQ;
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
		
  		--USA O PACOTE DE PARAMETROS DA DESTAQUE PARA CALCULAR AS DT PARA O CALCULO DAS METAS
		VAR_DINIC_META	:=	PC_PARAMETROS_DESTAQUE.FC_PER_INIC_META_CAMPA(CUR_CAMPA.CCAMPA_DSTAQ);			
		VAR_DFIM_META	:=	PC_PARAMETROS_DESTAQUE.FC_PER_FIM_META_CAMPA(CUR_CAMPA.CCAMPA_DSTAQ);
		
		--RECUPERA OS VALORES MINIMOS DE META
		VAR_META_MIN_AUTO	:=	PC_PARAMETROS_DESTAQUE.FC_RCUPD_META_MIN_AUTO(CUR_CAMPA.CCAMPA_DSTAQ);
		VAR_META_MIN_RE		:=	PC_PARAMETROS_DESTAQUE.FC_RCUPD_META_MIN_RE(CUR_CAMPA.CCAMPA_DSTAQ);
		
		VAR_DAPURC_DSTAQ	:= CUR_CAMPA.DAPURC_DSTAQ;

		--SUBPROGRAMA QUE CALCULA A META
		CALCULA_META(CUR_CAMPA.CCAMPA_DSTAQ);
		
		VAR_LOG := '----------TOTAL DE METAS PROCESSADAS PARA A CAMPANHA '||CUR_CAMPA.CCAMPA_DSTAQ||' '||CUR_CAMPA.ICAMPA_DSTAQ
				|| ': '||VAR_TOT_REG_PROC;
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA,VAR_LOG,VAR_LOG_PROCESSO,NULL,NULL);
			
	END LOOP;
	
	-- ATUALIZA STATUS TERMINO DA ROTINA  
	PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA, VAR_CPARM, VAR_ROTNA_PO);

	VAR_LOG := '--> STATUS FINAL DA ROTINA: ' || VAR_ROTNA_PO; 
	PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);

	VAR_LOG := 'TERMINO NORMAL DO PROCESSO (STATUS CTRL-M = 1). '||
 			   'OS PROCESSOS DEPENDENTES PODEM CONTINUAR.';
	PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);

      -- GRAVA A SITUACAO DESTE PROCESSO NA TABELA DE CONTROLE DO CTRLM   
    PR_GRAVA_LOG_EXCUC_CTRLM( VAR_DINIC_ROTNA, 
                              VAR_CROTNA     , 
                              SYSDATE        , -- DFIM_ROTNA
                              NULL           , -- IPROG
                              NULL           , -- CERRO
                              VAR_LOG        , -- RERRO
                              VAR_CSIT_CTRLM             );  

EXCEPTION
	WHEN VAR_FIM_PROCESSO_ERRO THEN

		-- ATUALIZA STATUS TERMINO DA ROTINA  
		PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA, VAR_CPARM, VAR_ROTNA_PE);

		VAR_LOG := '--> STATUS FINAL DA ROTINA: ' || VAR_ROTNA_PE; 
		PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
		
		VAR_LOG := 'ESTE PROCESSO FOI FINALIZADO COM ERRO (STATUS CTRL-M = ' || VAR_CSIT_CTRLM || 
                   ' ). OS PROCESSOS DEPENDENTES NAO DEVEM CONTINUAR. '||
                   'O ANALISTA/DBA DEVERA SER CONTACTADO IMEDIATAMENTE.';
   	    PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);
        
   	    PR_GRAVA_LOG_EXCUC_CTRLM ( VAR_DINIC_ROTNA, 
                              	   VAR_CROTNA     , 
                                   SYSDATE        , -- DFIM_ROTNA
                                   NULL           , -- IPROG
                                   NULL           , -- CERRO
                                   VAR_LOG        , -- RERRO
                                   VAR_CSIT_CTRLM             );        

	WHEN OTHERS THEN
    	VAR_CSIT_CTRLM := 6;
  
        VAR_LOG := 'EXCEPTION OTHERS -- ERRO ORACLE: '|| SUBSTR(SQLERRM, 1, 120);
        PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL); 

        -- ATUALIZA STATUS TERMINO DA ROTINA  
        PR_ATUALIZA_STATUS_ROTINA(VAR_CROTNA, VAR_CPARM, VAR_ROTNA_PE);

        VAR_LOG := '--> STATUS FINAL DA ROTINA: ' || VAR_ROTNA_PE; 
        PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);

        VAR_LOG := 'ESTE PROCESSO FOI FINALIZADO COM ERRO (STATUS CTRL-M = 6). '|| 
                   'OS PROCESSOS DEPENDENTES NAO DEVEM CONTINUAR. '				||
                   'O ANALISTA/DBA DEVERA SER CONTACTADO IMEDIATAMENTE.';
   	    PR_GRAVA_MSG_LOG_CARGA(VAR_CROTNA, VAR_LOG, VAR_LOG_PROCESSO, NULL, NULL);

   	    PR_GRAVA_LOG_EXCUC_CTRLM ( VAR_DINIC_ROTNA, 
                              	   VAR_CROTNA     , 
                                   SYSDATE        , -- DFIM_ROTNA
                                   NULL           , -- IPROG
                                   NULL           , -- CERRO
                                   VAR_LOG        , -- RERRO
                                   VAR_CSIT_CTRLM             );        
	
END SGPB6027;
/

