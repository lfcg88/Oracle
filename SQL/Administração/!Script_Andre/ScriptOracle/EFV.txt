-- Extrai fonte de view 
--


Declare

    v_view_name sys.all_views.view_name%TYPE;
--    v_text      sys.all_views.text%TYPE;
--
--
   outfile utl_file.file_type; 
   vowner  varchar2(30);
   varq  varchar2(100);
   vDir  varchar2(200);
   stmt varchar2(1024);
   vcaracter varchar2(2);
   found_col Boolean;
   v_column_name varchar2(50);
--        
--
    cursor c_views(powner varchar2) is
    select view_name from sys.all_views where owner = powner order by view_name;
--
--
    cursor col_cursor(powner in varchar2, ptable_name in varchar2) is 
     select  column_name
     from sys.dba_tab_columns
     where owner = powner and table_name = ptable_name
     order by column_id;
--        
--
PROCEDURE dump_body(pview_name IN VARCHAR2, stmt IN varchar2, tmpfile IN  utl_file.file_type)
  IS
    data_chunk          VARCHAR2(254);  -- these can go higher
    chunk_size          NUMBER:=254;    -- up to 32k
    chunk_size_returned NUMBER;
    mycursor            INTEGER; 
    cur_pos             NUMBER:=0;
    rows                NUMBER;
    dummy               NUMBER;
        status              VARCHAR2(50);
   --     tmpfile                         utl_file.file_type;
  BEGIN

 --    tmpfile := utl_file.fopen(dir, file_name, 'a', 32767);
     mycursor:=dbms_sql.open_cursor;
     dbms_sql.parse(mycursor, stmt, dbms_sql.v7);
     dbms_sql.bind_variable(mycursor, ':view_name', pview_name);

     dbms_sql.define_column_long(mycursor,1);
     dummy:=dbms_sql.execute(mycursor);
     rows:=dbms_sql.fetch_rows(mycursor);
     loop
         -- fetch 'chunks' of the long until we have got the lot
         dbms_sql.column_value_long(mycursor,
                                  1,
                                  chunk_size,
                                  cur_pos,
                                  data_chunk,
                                  chunk_size_returned);
         utl_file.put(tmpfile, data_chunk); -- use PUT to preserve data
         utl_file.fflush(tmpfile);  -- coloquei para forcar gravar
         cur_pos:=cur_pos + chunk_size;
         exit when chunk_size_returned = 0; 
     end loop;
     dbms_sql.close_cursor(mycursor);
--      utl_file.fflush(tmpfile);
--         utl_file.fclose(tmpfile);
  EXCEPTION
        when utl_file.invalid_path then
                raise_application_error(-20100, 'Invalid path in dump_body');
        when utl_file.invalid_mode then
                raise_application_error(-20101, 'Invalid mode in dump_body');
        when utl_file.invalid_operation then
                raise_application_error(-20102, 'Invalid operation in dump_body');
        when utl_file.invalid_filehandle then
                raise_application_error(-20103, 'Invalid filehandle in dump_body');
        when utl_file.write_error then
                raise_application_error(-20104, 'Write error in dump_body');
        when utl_file.read_error then
                raise_application_error(-20105, 'Read error in dump_body');
        when utl_file.internal_error then
                raise_application_error(-20106, 'Internal error in dump_body');
    WHEN OTHERS THEN
                raise_application_error(-20107, 'Other Error in dump_body');
  END dump_body;
--
--
begin
    vowner :='OWNBHOST';
    vdir:='/u00/app/oracle/admin/prd3/utl_file';
--
--      utl_file.putf(outfile,'\n-- Creating views for user %s\n\n', v_owner);
      stmt := 'SELECT TEXT FROM SYS.ALL_VIEWS WHERE VIEW_NAME =:view_name';
      open c_views(vowner);
      loop
         fetch c_views into v_view_name;
         exit when c_views%NOTFOUND;
         varq := vowner||'.'||v_view_name||'.vw';
         outfile := Utl_File.Fopen(vdir,varq,'W');
         utl_file.putf(outfile, 'CREATE OR REPLACE VIEW %s ', v_view_name);
--
      found_col := false;
      open col_cursor(vowner, v_view_name);
      loop
         fetch col_cursor into v_column_name;
         exit when col_cursor%NOTFOUND;
         if not found_col then
                 vcaracter := ' (';
                 found_col := true;
         else
                 vcaracter := ', ';
         end if;
         utl_file.putf(outfile,'%s\n',vcaracter); 
         utl_file.putf(outfile,'%s',v_column_name);
      end loop;
      utl_file.putf(outfile,' %s\n%s\n',' )','AS'); 
      close col_cursor;
--
--
--         utl_file.fflush(outfile);
--         utl_file.fclose(outfile);
           dump_body(v_view_name, stmt,outfile);
--         outfile := utl_file.fopen(dir, file_name,'a');
         utl_file.putf(outfile, '\n%s','/');
         utl_file.fclose(outfile);
--
     end loop;
     close c_views;          
End;
/