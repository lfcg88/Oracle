+++++++++++++++++++++++++++++++++++
Creating the SQL Access Advisor Task
+++++++++++++++++++++++++++++++++++++

SQL> exec dbms_advisor.create_task(
advisor_name => 'SQL Access Advisor',
task_name => 'test_task1')

+++++++++++++++++++++++++++++++++++
Creating a SQL Tuning Set
+++++++++++++++++++++++++++++++++++

First, create an empty STS to hold the SQL workload that you want to pass to the
SQL Access Advisor task as input for its analysis:
SQL> exec dbms_sqltune.create_sqlset (-
sqlset_name => 'test_sts1', -
description => 'Test STS for Access Advisor');

+++++++++++++++++++++++++++++++++++
Loading the SQL Tuning Set
+++++++++++++++++++++++++++++++++++

By
default, the LOAD_SQLSET procedure will load only new statements to the STS,
but you can also update existing statements in the STS if you want.
SQL> declare
2 mycursor dbms_sqltune.sqlset_cursor;
3 begin
4 open mycursoror
5 select value(p)
6 from table (
7 dbms_sqltune.select_cursor_cache(
8 'parsing_schema_NAME <> ''SYS''',NULL,NULL,NULL,NULL,1,
NULL,'ALL')) p;
9 dbms_sqltune.load_sqlset(sqlset_name => 'test_sts1',
populate_cursor => mycursor);
10* end;

In this example, I showed how to load SQL statements from the SQL cursor
cache. You can also use the SELECT_WORKLOAD_REPOSITORY function to
select SQL statements from the automatic workload repository instead


++++++++++++++++++++++++++++++++++++
Linking the Advisor Task and the Workload
++++++++++++++++++++++++++++++++++++++++

SQL> exec dbms_advisor.add_sts_ref (
task_name => 'test_task1',
sts_owner => 'SH',
sts_name =>'test_sts1');

+++++++++++++++++++++++++++++++++++++++
Setting the Task Parameters
+++++++++++++++++++++++++++++++++++++++

Use the SET_TASK_PARAMETER procedure to set the task parameters.

Here are
some examples:
SQL> exec dbms_advisor.set_task_parameter ('test_task1',
'valid_table_list','SH.SALES,SH.CUSTOMERS);'
SQL> exec dbms_advisor.set_task_parameter ('test_task1',
'mode', 'comprehensive');
SQL> exec dbms_advisor.set_task_parameter ('test_task1',
'journaling',4);

+++++++++++++++++++++++++++++++++++
Execute the Task
+++++++++++++++++++++++++++++++++++

Execute the task by issuing the following command:
SQL> exec dbms_advisor.execute_task (task_name => 'test_task1');


++++++++++++++++++++++++++++++++
Viewing the Recommendations
++++++++++++++++++++++++++++++++


The SQL Access Advisor links each of its recommendations to a specific SQL
statement from the workload. You can use the GET_TASK_REPORT function
to view a report, as shown here:
SQL> exec DBMS_ADVISOR.GET_TASK_REPORT (
task_name IN VARCHAR2,
type IN VARCHAR2 := 'TEXT',
level IN VARCHAR2 := 'TYPICAL',
section IN VARCHAR2 := 'ALL',
owner_name IN VARCHAR2 := NULL,
execution_name IN VARCHAR2 := NULL,
object_id IN NUMBER := NULL)
RETURN CLOB;

++++++++++++++++++++++++++++++
Generating SQL Scripts
++++++++++++++++++++++++++++++

Note that you must first create a
directory with the create directory statement before you execute the previous
code. Here’s how you create the directory:

SQL> create directory access_adv_rslts as
'/u01/app/oracle/access';
Directory Created.


Once you create the directory, execute the CREATE_FILE procedure to generate
the SQL script in that directory, as shown here:

SQL> execute dbms_advior.create_file (
dbms_advisor.get_task_script ('test_task1'),
'access_adv_rslts', 'testscript1.sql');



++++++++++++++++++++++++++++++++
Use the INTERRUPT_TASK

++++++++++++++++++++++++++++++++

procedure to terminate an advisor task before it reaches its end. You can still
get any recommendation that has been created up to that point. The following
example shows how to interrupt a task:

SQL> exec dbms_advisor.interrupt_task ('test_task1');